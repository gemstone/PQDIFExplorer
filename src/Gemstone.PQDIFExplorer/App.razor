@implements IDisposable

@using System.Threading
@using Gemstone.PQDIF.Physical

@inject IJSRuntime JSRuntime
@inject PQDIFFileCache Cache
@inject NavigationManager NavigationManager

<div class="app" @ref="AppContainer">
    <CascadingValue Value="this">
        <Router AppAssembly="@typeof(Program).Assembly">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingValue>
</div>

@code {
    private class LoadingHandle : IDisposable
    {
        private CancellationTokenSource CancellationTokenSource { get; }
        private NavigationManager NavigationManager { get; }
        private bool Disposed { get; set; }

        public LoadingHandle(CancellationTokenSource cancellationTokenSource, NavigationManager navigationManager)
        {
            CancellationTokenSource = cancellationTokenSource;
            NavigationManager = navigationManager;
            NavigationManager.LocationChanged += HandleLocationChanged;
        }

        public void Dispose()
        {
            if (Disposed)
                return;

            NavigationManager.LocationChanged -= HandleLocationChanged;
            CancellationTokenSource.Cancel();
            CancellationTokenSource.Dispose();
            Disposed = true;
        }

        private void HandleLocationChanged(object sender, LocationChangedEventArgs args) =>
            Dispose();
    }

    private ElementReference AppContainer { get; set; }
    private string? DropCachingRegistration { get; set; }
    public CancellationToken LoadToken { get; set; }

    public IDisposable? TryStartLoading()
    {
        if (LoadToken.CanBeCanceled && !LoadToken.IsCancellationRequested)
            return null;

        CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
        LoadToken = cancellationTokenSource.Token;
        return new LoadingHandle(cancellationTokenSource, NavigationManager);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        const string RegisterFunctionName = "pqdif.registerDropHandler";
        DotNetObjectReference<App> appReference = DotNetObjectReference.Create(this);
        var callback = new { Instance = appReference, MethodName = nameof(HandleDropAsync) };
        DropCachingRegistration = await JSRuntime.InvokeAsync<string>(RegisterFunctionName, AppContainer, callback);
    }

    [JSInvokable]
    public async Task HandleDropAsync()
    {
        if (DropCachingRegistration == null)
            return;

        using IDisposable? loadingHandle = TryStartLoading();

        if (loadingHandle == null)
            return;

        FileKeyData[] fileKeys = await Cache.SaveAsync(DropCachingRegistration, LoadToken);

        if (!fileKeys.Any())
            return;

        FileKeyData firstKey = fileKeys[0];
        NavigationManager.NavigateTo($"PQDIF/View/{firstKey.Key}");
    }

    public void Dispose()
    {
        if (DropCachingRegistration == null)
            return;

        const string UnregisterFunctionName = "pqdif.unregisterDropHandler";
        JSRuntime.InvokeVoidAsync(UnregisterFunctionName);
    }
}
