@page "/PQDIF/View/{fileKey}"

@using System.Threading
@using Gemstone.PQDIF.Physical
@using Gemstone.Web.Razor.Trees 

@inject PQDIFFileCache Cache

<h5>@FileName</h5>

<div class="pqdif-file-viewer">
    <div class="treeview-pane">
        <TreeView @ref="Tree" SelectionChanged="StateHasChanged">
            @foreach (Record record in Records)
            {
                int? index = GetIndex(record);
                var key = new { index, record };
                <RecordNode @key="key" Index="index" Record="record" />
            }
        </TreeView>
    </div>

    <div class="detail-pane">
        @Detail
    </div>
</div>

@code {
    [Parameter]
    public string? FileKey { get; set; }

    private TreeView? Tree { get; set; }
    private PQDIFFile? File { get; set; }
    private string? FileName => File?.Name;

    private RenderFragment? Detail => Tree?.SelectedNode?.Data switch
    {
        Record record => @<RecordDetail @key="record" Record="record" />,
        Element element => @<ElementDetail @key="element" Element="element" />,
        _ => @<Text></Text>
    };

    private IEnumerable<Record> Records =>
        File?.Records ?? Enumerable.Empty<Record>();

    private IDictionary<Record, int>? IndexLookup { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (FileKey == null)
            return;

        using CancellationTokenSource retrieveTokenSource = new CancellationTokenSource();
        File = await Cache.RetrieveAsync(FileKey, retrieveTokenSource.Token);
        IndexLookup = RecordNode.GetIndexLookup(Records);
        StateHasChanged();
    }

    private int? GetIndex(Record record)
    {
        if (IndexLookup == null)
            return null;

        if (!IndexLookup.TryGetValue(record, out int index))
            return null;

        return index;
    }
}
