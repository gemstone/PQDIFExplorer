@implements IDisposable

@using System.Linq

@inject PQDIFFileCache Cache

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">
        <img src="explorer.ico" width="32" height="32" aria-hidden="true" /> PQDIF Explorer
    </a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column flex-nowrap">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true" /> Home
            </NavLink>
        </li>

        @foreach (PQDIFKeyData fileKey in FileKeys)
        {
            <li @key="fileKey" class="nav-item px-3" style="white-space: nowrap">
                <NavLink class="nav-link" href="@($"PQDIF/View/{fileKey.Key}")" title="@fileKey.Name">
                    @if (fileKey.HasUnsavedChanges)
                    {
                        <span class="oi oi-pencil nav-pencil" aria-hidden="true" />
                    }

                    <span class="oi oi-file" aria-hidden="true" />
                    <span class="d-inline-block text-overflow-ellipsis">@fileKey.Name</span>
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool CollapseNavMenu { get; set; } = true;

    private string? NavMenuCssClass =>
        CollapseNavMenu ? "collapse" : null;

    private IEnumerable<PQDIFKeyData> FileKeys { get; set; } =
        Enumerable.Empty<PQDIFKeyData>();

    protected override async Task OnInitializedAsync()
    {
        FileKeys = await Cache
            .RetrieveKeysAsync()
            .OrderBy(fileKey => fileKey.Name)
            .ToListAsync();

        StateHasChanged();
        Cache.Updated += HandleCacheUpdated;
    }

    public void Dispose() =>
        Cache.Updated -= HandleCacheUpdated;

    private async void HandleCacheUpdated(object? sender, EventArgs args)
    {
        FileKeys = await Cache
            .RetrieveKeysAsync()
            .OrderBy(fileKey => fileKey.Name)
            .ToListAsync();

        StateHasChanged();
    }

    private void ToggleNavMenu() =>
        CollapseNavMenu = !CollapseNavMenu;
}
